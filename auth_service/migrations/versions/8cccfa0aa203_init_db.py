"""empty message

Revision ID: 8cccfa0aa203
Revises: 
Create Date: 2023-01-12 21:11:32.849579

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '8cccfa0aa203'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("CREATE SCHEMA IF NOT EXISTS auth")

    op.create_table('roles',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=True),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('name'),
    schema='auth'
    )
    op.create_table('users',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('email', sa.String(length=50), nullable=False),
    sa.Column('password', sa.String(length=255), nullable=False),
    sa.Column('refresh_token', sa.String(length=500), nullable=False),
    sa.Column('registered_at', sa.DateTime(), nullable=False),
    sa.Column('is_admin', sa.Boolean(), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('refresh_token'),
    schema='auth'
    )
    op.create_table('user_role',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('role_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['auth.roles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    schema='auth'
    )
    op.create_table('auth_history',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_agent', sa.String(length=255), nullable=False),
    sa.Column('ip_address', sa.String(length=100), nullable=True),
    sa.Column('device', sa.Text(), nullable=False),
    sa.Column('created', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], ),
    sa.PrimaryKeyConstraint('id', 'device'),
    sa.UniqueConstraint('id', 'device'),
    postgresql_partition_by='LIST (device)',
    schema='auth'
    )
    op.execute(
        """CREATE TABLE IF NOT EXISTS auth.auth_history_smart
        PARTITION OF auth.auth_history FOR VALUES IN ('smart')"""
    )
    op.execute(
        """CREATE TABLE IF NOT EXISTS auth.auth_history_mobile
        PARTITION OF auth.auth_history FOR VALUES IN ('mobile')"""
    )
    op.execute(
        """CREATE TABLE IF NOT EXISTS auth.auth_history_web
        PARTITION OF auth.auth_history FOR VALUES IN ('web')"""
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('auth_history', schema='auth')
    op.drop_table('user_role', schema='auth')
    op.drop_table('users', schema='auth')
    op.drop_table('roles', schema='auth')

    op.execute("DROP SCHEMA IF EXISTS auth")
    # ### end Alembic commands ###
